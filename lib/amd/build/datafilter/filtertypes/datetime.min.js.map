{"version":3,"file":"datetime.min.js","sources":["../../../src/datafilter/filtertypes/datetime.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base filter for a date/time selector\n *\n * @module     core/datafilter/filtertypes/datetime\n * @author     Mark Johnson <mark.johnson@catalyst-eu.net>\n * @copyright  2024 Catalyst IT Europe Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Filter from 'core/datafilter/filtertype';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings} from 'core/str';\n\nconst MODES = {\n    before: 'before',\n    after: 'after',\n    between: 'between',\n};\n\nexport default class extends Filter {\n\n    SELECTORS = {\n        afterwrapper: `.${this.filterType}-afterwrapper`,\n        beforewrapper: `.${this.filterType}-beforewrapper`,\n        betweenwrapper: `.${this.filterType}-betweenwrapper`,\n        mode: `[data-filterfield=${this.filterType}-mode]`,\n    };\n\n    mode = null;\n\n    constructor(filterType, rootNode, initialValues, filterOptions = {mode: MODES.before}) {\n        super(filterType, rootNode, initialValues);\n        this.addModeSelector(filterOptions.mode);\n    }\n\n    async addValueSelector(initialValues = []) {\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n        const sourceDataNode = this.getSourceDataForFilter();\n        const defaultBefore = sourceDataNode.getElementsByTagName('option')[0].value;\n        const defaultAfter = sourceDataNode.getElementsByTagName('option')[1].value;\n        const title = sourceDataNode.getAttribute('data-field-title');\n        const labels = await getStrings([\n            {\n                key: 'datetimefilterafter',\n                component: 'core',\n                param: {title},\n            },\n            {\n                key: 'datetimefilterbefore',\n                component: 'core',\n                param: {title},\n            },\n        ]);\n        const context = {\n            filtertype: this.filterType,\n            afterlabel: labels[0],\n            beforelabel: labels[1],\n            required: sourceDataNode.dataset.required,\n            aftervalue: initialValues[0] ?? defaultAfter,\n            beforevalue: initialValues[1] ?? defaultBefore,\n        };\n        const datetimeUi = await Templates.renderForPromise('core/datafilter/filtertypes/datetime_selector', context);\n        return Templates.replaceNodeContents(\n            specificFilterSet.querySelector(Selectors.filter.regions.values),\n            datetimeUi.html,\n            datetimeUi.js\n        );\n    }\n    async addModeSelector(mode) {\n        const modeStrings = await getStrings([\n            {key: 'selectdates'},\n            {key: 'filterdatebefore', component: 'reportbuilder'},\n            {key: 'filterdateafter', component: 'reportbuilder'},\n            {key: 'between'}\n        ]);\n        const context = {\n            label: modeStrings[0],\n            filtertype: this.filterType,\n            modeoptions: [\n                {\n                    value: MODES.before,\n                    label: modeStrings[1],\n                    selected: mode === MODES.before ? 'selected' : '',\n                },\n                {\n                    value: MODES.after,\n                    label: modeStrings[2],\n                    selected: mode === MODES.after ? 'selected' : '',\n                },\n                {\n                    value: MODES.between,\n                    label: modeStrings[3],\n                    selected: mode === MODES.between ? 'selected' : '',\n                },\n            ],\n        };\n        const modeUi = await Templates.renderForPromise('core/datafilter/filtertypes/datetime_mode', context);\n        const filterValueNode = this.getFilterValueNode();\n        filterValueNode.insertAdjacentHTML('beforebegin', modeUi.html);\n        const modeSelect = this.filterRoot.querySelector(this.SELECTORS.mode);\n        modeSelect.addEventListener('change', this.updateFieldVisibility.bind(this));\n        modeSelect.dispatchEvent(new Event('change')); // Update field visibility based on initial mode.\n    }\n\n    updateFieldVisibility(event) {\n        const filterValueNode = this.getFilterValueNode();\n        const afterWrapper = filterValueNode.querySelector(this.SELECTORS.afterwrapper);\n        const beforeWrapper = filterValueNode.querySelector(this.SELECTORS.beforewrapper);\n        const betweenWrapper = filterValueNode.querySelector(this.SELECTORS.betweenwrapper);\n        const value = event.target.value;\n        if (value === MODES.between) {\n            betweenWrapper.classList.remove('d-none');\n        } else {\n            betweenWrapper.classList.add('d-none');\n        }\n        if (value === MODES.after || value === MODES.between) {\n            afterWrapper.classList.remove('d-none');\n        } else {\n            afterWrapper.classList.add('d-none');\n        }\n        if (value === MODES.before || value === MODES.between) {\n            beforeWrapper.classList.remove('d-none');\n        } else {\n            beforeWrapper.classList.add('d-none');\n        }\n    }\n\n    get values() {\n        return [\n            this.filterRoot.querySelector(`[data-filterfield=\"${this.name}1\"]`).value,\n            this.filterRoot.querySelector(`[data-filterfield=\"${this.name}2\"]`).value,\n        ];\n    }\n\n    get filterOptions() {\n        return [\n            {name: 'mode', value: this.filterRoot.querySelector(this.SELECTORS.mode).value}\n        ];\n    }\n\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            values: this.values,\n            filteroptions: this.filterOptions,\n        };\n    }\n}"],"names":["MODES","Filter","constructor","filterType","rootNode","initialValues","filterOptions","mode","afterwrapper","this","beforewrapper","betweenwrapper","addModeSelector","specificFilterSet","querySelector","Selectors","filter","byName","sourceDataNode","getSourceDataForFilter","defaultBefore","getElementsByTagName","value","defaultAfter","title","getAttribute","labels","key","component","param","context","filtertype","afterlabel","beforelabel","required","dataset","aftervalue","beforevalue","datetimeUi","Templates","renderForPromise","replaceNodeContents","regions","values","html","js","modeStrings","label","modeoptions","selected","modeUi","getFilterValueNode","insertAdjacentHTML","modeSelect","filterRoot","SELECTORS","addEventListener","updateFieldVisibility","bind","dispatchEvent","Event","event","filterValueNode","afterWrapper","beforeWrapper","betweenWrapper","target","classList","remove","add","name","filterValue","jointype","filteroptions"],"mappings":"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"}