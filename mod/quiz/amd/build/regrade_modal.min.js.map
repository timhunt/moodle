{"version":3,"file":"regrade_modal.min.js","sources":["../src/regrade_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Regrade modal form is used to regrade or dryrun the attempts and questions.\n *\n * @module mod_quiz/regrade_modal\n * @copyright 2024 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Fragment from 'core/fragment';\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\n\n/**\n * Initialize and add the event for the regrade form.\n *\n * @param {Object} modal The modal object.\n */\nconst initRegradeForm = (modal) => {\n    // Add the help text to the title of the modal.\n    const helpText = document.querySelector('#id_regradelabel_label + div > a');\n    modal.getTitle().append(helpText);\n    const modalBody = modal.getBody()[0];\n    // Initialize the modal body elements.\n    const allAttemptsButton = modalBody.querySelector('#id_attempts_0');\n    const selectedAttemptsButton = modalBody.querySelector('#id_attempts_1');\n    const allQuestionsButton = modalBody.querySelector('#id_questions_0');\n    const selectedQuestionsButton = modalBody.querySelector('#id_questions_1');\n    const questionIdCheckboxes = modalBody.querySelectorAll('[id^=\"id_questionids_\"]');\n    // Check if user tick on select all in the table.\n    const selectAll = document.getElementById('mod-quiz-report-overview-report-selectall-attempts');\n    // Check if we have any checkbox checked in the table.\n    const isSelectedAttemptsInTableChecked = document.querySelector('[id^=\"attemptid_\"]:checked') !== null;\n\n    // Set the behavior checked and disabled for the radio buttons in the modal.\n    if (isSelectedAttemptsInTableChecked || selectAll.checked) {\n        selectedAttemptsButton.checked = true;\n    }\n    if (allAttemptsButton.checked) {\n        selectedAttemptsButton.disabled = true;\n    }\n    if (allQuestionsButton.checked) {\n        questionIdCheckboxes.forEach((questionIdCheckbox) => {\n            questionIdCheckbox.disabled = true;\n        });\n    }\n\n    const regradeButton = modalBody.querySelector('#id_regradenow');\n    const dryRun = modalBody.querySelector('#id_dryrun');\n    // Add the change event listener to the modal form if any field changes.\n    modalBody.querySelector('form').addEventListener('change', () => {\n        transformForm(allQuestionsButton, selectedQuestionsButton, questionIdCheckboxes, regradeButton,\n            dryRun, modalBody);\n    });\n    // Handle the click event for regradeButton and dryRun elements.\n    regradeButton.addEventListener('click', (e) => handleClick(e, allAttemptsButton,\n        selectedAttemptsButton, allQuestionsButton, selectedQuestionsButton, questionIdCheckboxes, modalBody));\n    dryRun.addEventListener('click', (e) => handleClick(e, allAttemptsButton,\n        selectedAttemptsButton, allQuestionsButton, selectedQuestionsButton, questionIdCheckboxes, modalBody));\n};\n\n/**\n * Controls all modifications to perform when any field changes.\n *\n * @param {Object} allQuestionsButton The all questions button.\n * @param {Object} selectedQuestionsButton The selected questions button.\n * @param {Object} questionIdCheckboxes The question id checkboxes.\n * @param {Object} regradeButton The regrade button.\n * @param {Object} dryRun The dry run button.\n * @param {Object} modalBody The modal body.\n */\nconst transformForm = (allQuestionsButton, selectedQuestionsButton, questionIdCheckboxes, regradeButton,\n        dryRun, modalBody) => {\n    // Check if any question checkbox is checked.\n    let isChecked = modalBody.querySelector('[id^=\"id_questionids_\"]:checked') !== null;\n\n    // Set default values for regradeButton and dryRun.\n    regradeButton.disabled = dryRun.disabled = false;\n\n    // Disable the checkboxes if the all questions button is checked.\n    if (allQuestionsButton.checked) {\n        questionIdCheckboxes.forEach((questionIdCheckbox) => {\n            questionIdCheckbox.disabled = true;\n        });\n    }\n    // Enable and filter the checkboxes if the selected questions button is checked to get the list of questions.\n    if (selectedQuestionsButton.checked) {\n        questionIdCheckboxes.forEach((questionIdCheckbox) => {\n            questionIdCheckbox.disabled = false;\n        });\n        if (!isChecked) {\n            regradeButton.disabled = dryRun.disabled = true;\n        }\n    }\n};\n\n/**\n * Handles the click event for the regradeButton and dryRun elements.\n *\n * @param {Event} e The event object.\n * @param {Object} allAttemptsrButton The all attempts radio button.\n * @param {Object} selectedAttemptsrButton The selected attempts radio button.\n * @param {Object} allQuestionsrButton The all questions radio button.\n * @param {Object} selectedQuestionsrButton The selected radio questions button.\n * @param {Object} questionIdCheckboxes The question id checkboxes.\n * @param {Object} modalBody The modal body.\n */\nconst handleClick = (e, allAttemptsrButton, selectedAttemptsrButton, allQuestionsrButton,\n        selectedQuestionsrButton, questionIdCheckboxes, modalBody) => {\n    e.preventDefault();\n    // Handle if all attempts and all questions are checked.\n    if (allAttemptsrButton.checked && allQuestionsrButton.checked) {\n        modalBody.querySelector('input[name=\"regradeall\"]').value = true;\n    }\n    // Handle if selected attempts and all questions are checked.\n    if (selectedAttemptsrButton.checked && allQuestionsrButton.checked) {\n        modalBody.querySelector('input[name=\"regrade\"]').value = true;\n        appendAttemptCheckboxesId(modalBody);\n    }\n    // Handle if all attempts and selected questions are checked.\n    if (allAttemptsrButton.checked && selectedQuestionsrButton.checked) {\n        modalBody.querySelector('input[name=\"regradealllwithquestionselected\"]').value = true;\n        modalBody.querySelector('input[name=\"questionslots\"]').value = getCheckedQuestionSlots(questionIdCheckboxes);\n    }\n    // Handle if selected attempts and selected questions are checked.\n    if (selectedAttemptsrButton.checked && selectedQuestionsrButton.checked) {\n        modalBody.querySelector('input[name=\"regradewithquestionselected\"]').value = true;\n        modalBody.querySelector('input[name=\"questionslots\"]').value = getCheckedQuestionSlots(questionIdCheckboxes);\n        appendAttemptCheckboxesId(modalBody);\n    }\n    // Handle if dryrun is checked.\n    if (e.target.name === 'dryrun') {\n        modalBody.querySelector('form input[name=\"dryrun\"]').value = true;\n    }\n    modalBody.querySelector('form').submit();\n};\n\n/**\n * Append the attempt checkboxes id to the modal form.\n *\n * @param {Object} modalBody The modal body.\n */\nconst appendAttemptCheckboxesId = (modalBody) => {\n    const selectedAttemptsInTable = document.querySelectorAll('[id^=\"attemptid_\"]:checked');\n    selectedAttemptsInTable.forEach((checkbox) => {\n        checkbox.type = 'hidden';\n        modalBody.querySelector('form').append(checkbox);\n    });\n};\n\n/**\n * Get the list of question slots.\n *\n * @param {Object} questionIdCheckboxes The question id checkboxes.\n * @return {String} The list of question slots.\n */\nconst getCheckedQuestionSlots = (questionIdCheckboxes) => {\n    let questionSlots = '';\n    questionIdCheckboxes.forEach((questionIdCheckbox) => {\n        if (questionIdCheckbox.checked) {\n            const questionSlot = questionIdCheckbox.dataset.questionslot;\n            questionSlots += (questionSlots.length > 0 ? ',' : '') + questionSlot;\n        }\n    });\n\n    return questionSlots;\n};\n\n/**\n * Initialize the modal.\n *\n * @param {int} context The context id.\n */\nexport const init = (context) => {\n    const regradeAttempts = document.getElementById('regradeattempts');\n    if (regradeAttempts) {\n        regradeAttempts.addEventListener('click', async(e) => {\n            e.preventDefault();\n            const questionIdsInTable = document.querySelector('#attemptsform input[name=\"questionids\"]').value;\n            const questionSlotsInTable = document.querySelector('#attemptsform input[name=\"questionslots\"]').value;\n            const reportId = document.querySelector('#attemptsform input[name=\"id\"]').value;\n            const questionMode = document.querySelector('#attemptsform input[name=\"mode\"]').value;\n            const formFragment = Fragment.loadFragment('mod_quiz', 'regrade_modal', context, {\n                questionIdsInTable,\n                questionSlotsInTable,\n                reportId,\n                questionMode\n            });\n            const modal = await Modal.create({\n                title: getString('regrade', 'quiz_overview'),\n                body: formFragment,\n                isVerticallyCentered: true,\n                removeOnClose: true,\n                show: true,\n            });\n            modal.bodyPromise.then(function() {\n                initRegradeForm(modal);\n                return;\n            }).catch(Notification.exception);\n        });\n    }\n};\n"],"names":["transformForm","allQuestionsButton","selectedQuestionsButton","questionIdCheckboxes","regradeButton","dryRun","modalBody","isChecked","querySelector","disabled","checked","forEach","questionIdCheckbox","handleClick","e","allAttemptsrButton","selectedAttemptsrButton","allQuestionsrButton","selectedQuestionsrButton","preventDefault","value","appendAttemptCheckboxesId","getCheckedQuestionSlots","target","name","submit","document","querySelectorAll","checkbox","type","append","questionSlots","questionSlot","dataset","questionslot","length","context","regradeAttempts","getElementById","addEventListener","async","questionIdsInTable","questionSlotsInTable","reportId","questionMode","formFragment","Fragment","loadFragment","modal","Modal","create","title","body","isVerticallyCentered","removeOnClose","show","bodyPromise","then","helpText","getTitle","getBody","allAttemptsButton","selectedAttemptsButton","selectAll","initRegradeForm","catch","Notification","exception"],"mappings":"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"}