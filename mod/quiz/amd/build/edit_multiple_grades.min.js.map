{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 THe Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainerRemoveOnCompletion} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId\n * @param {String} name\n * @return {Promise}\n */\nconst createGradeItem = (quizId, name) => fetchMany([{\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: name}],\n    }\n}])[0];\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId\n * @param {Number} gradeItemId\n * @param {String} newName\n * @return {Promise}\n */\nconst updateGradeItem = (quizId, gradeItemId, newName) => fetchMany([{\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n}])[0];\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId\n * @param {Number} gradeItemId\n * @return {Promise}\n */\nconst deleteGradeItem = (quizId, gradeItemId) => fetchMany([{\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n}])[0];\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainerRemoveOnCompletion(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(() => pending.resolve())\n        .then(() => window.location.reload())\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest('span.inplaceeditable');\n\n    document.querySelectorAll('span.inplaceeditable.inplaceeditingon').forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"sr-only\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest('span.inplaceeditable.inplaceeditingon');\n    if (!editableSpan) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainerRemoveOnCompletion(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(() => pending.resolve())\n        .then(() => window.location.reload())\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest('span.inplaceeditable.inplaceeditingon');\n    if (!editableSpan) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest('span.inplaceeditable.inplaceeditingon');\n    if (!editableSpan) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    if (!link) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' table.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainerRemoveOnCompletion(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    getString('gradeitemdefaultname', 'quiz')\n        .then((name) => createGradeItem(quizId, name))\n        .then(() => pending.resolve())\n        .then(() => window.location.reload())\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    const gradeItemTable = document.getElementById('mod_quiz-grade-item-list');\n    if (gradeItemTable) {\n        gradeItemTable.addEventListener('click', handleGradeItemClick);\n        gradeItemTable.addEventListener('keydown', handleGradeItemKeyDown);\n        gradeItemTable.addEventListener('keyup', handleGradeItemKeyUp);\n        gradeItemTable.addEventListener('focusout', handleGradeItemFocusOut);\n    }\n\n    document.getElementById('mod_quiz-add_grade_item').addEventListener('click', handleAddGradeItemClick);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["handleGradeItemDelete","e","preventDefault","pending","Pending","tableCell","target","closest","tableRow","quizId","gradeItemId","methodname","args","quizid","quizgradeitems","id","deleteGradeItem","dataset","quizGradeItemId","then","resolve","window","location","reload","catch","Notification","exception","stopEditingGadeItem","editableSpan","innerHTML","oldContent","classList","remove","querySelector","focus","handleGradeItemKeyDown","keyCode","newName","value","name","updateGradeItem","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleGradeItemClick","link","actionDelete","actionEdit","document","querySelectorAll","forEach","instructions","uniqueId","editLabel","rawName","inputElement","select","add","handleGradeItemEditStart","handleAddGradeItemClick","parentNode","createGradeItem","gradeItemTable","getElementById","addEventListener","registerEventListeners"],"mappings":"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"}